{"version":3,"file":"index.production.js","sources":["../../../query-core/build/lib/subscribable.mjs","../../../query-core/build/lib/utils.mjs","../../../query-core/build/lib/focusManager.mjs","../../../query-core/build/lib/onlineManager.mjs","../../../query-core/build/lib/retryer.mjs","../../../query-core/build/lib/logger.mjs","../../../query-core/build/lib/notifyManager.mjs","../../../query-core/build/lib/removable.mjs","../../../query-core/build/lib/query.mjs","../../../query-core/build/lib/queryCache.mjs","../../../query-core/build/lib/mutation.mjs","../../../query-core/build/lib/mutationCache.mjs","../../../query-core/build/lib/infiniteQueryBehavior.mjs","../../../query-core/build/lib/queryObserver.mjs","../../../query-core/build/lib/queriesObserver.mjs","../../../query-core/build/lib/infiniteQueryObserver.mjs","../../../query-core/build/lib/mutationObserver.mjs","../../../query-core/build/lib/hydration.mjs","../../src/reactBatchedUpdates.ts","../../src/setBatchUpdatesFn.ts","../../../../node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/index.js","../../../../node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../../src/useSyncExternalStore.ts","../../src/QueryClientProvider.tsx","../../src/isRestoring.tsx","../../src/QueryErrorResetBoundary.tsx","../../src/utils.ts","../../src/errorBoundaryUtils.ts","../../src/suspense.ts","../../src/useBaseQuery.ts","../../src/Hydrate.tsx","../../src/useMutation.ts","../../../query-core/build/lib/queryClient.mjs","../../src/useInfiniteQuery.ts","../../src/useIsFetching.ts","../../src/useIsMutating.ts","../../src/useQueries.ts","../../src/useQuery.ts"],"sourcesContent":["class Subscribable {\n  constructor() {\n    this.listeners = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.length > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\nexport { Subscribable };\n//# sourceMappingURL=subscribable.mjs.map\n","// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined' || 'Deno' in window;\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n\n  return;\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nexport { difference, functionalUpdate, getAbortController, hashQueryKey, hashQueryKeyByOptions, isError, isPlainArray, isPlainObject, isQueryKey, isServer, isValidTimeout, matchMutation, matchQuery, noop, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs, partialDeepEqual, partialMatchKey, replaceAt, replaceData, replaceEqualDeep, scheduleMicrotask, shallowEqualObjects, sleep, timeUntilStale };\n//# sourceMappingURL=utils.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map\n","import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        const canContinue = isResolved || !shouldPause();\n\n        if (canContinue) {\n          continueResolve(value);\n        }\n\n        return canContinue;\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn == null ? void 0 : continueFn();\n      return didContinue ? promise : Promise.resolve();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };\n//# sourceMappingURL=retryer.mjs.map\n","const defaultLogger = console;\n\nexport { defaultLogger };\n//# sourceMappingURL=logger.mjs.map\n","import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexport { createNotifyManager, notifyManager };\n//# sourceMappingURL=notifyManager.mjs.map\n","import { isValidTimeout, isServer } from './utils.mjs';\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\nexport { Removable };\n//# sourceMappingURL=removable.mjs.map\n","import { replaceData, noop, timeUntilStale, getAbortController } from './utils.mjs';\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.mjs';\nimport { Removable } from './removable.mjs';\n\n// CLASS\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config, _this$cache$config$on2, _this$cache$config2;\n\n        // Notify cache callback\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, this.state.data, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on3, _this$cache$config3, _this$cache$config$on4, _this$cache$config4;\n\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n          }\n\n          onError(new Error(this.queryHash + \" data is undefined\"));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on3 = (_this$cache$config3 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on3.call(_this$cache$config3, data, this);\n        (_this$cache$config$on4 = (_this$cache$config4 = this.cache.config).onSettled) == null ? void 0 : _this$cache$config$on4.call(_this$cache$config4, data, this.state.error, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({\n          type: 'failed',\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasData = typeof data !== 'undefined';\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\nexport { Query };\n//# sourceMappingURL=query.mjs.map\n","import { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\nexport { QueryCache };\n//# sourceMappingURL=queryCache.mjs.map\n","import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n\n      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n\n        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };\n//# sourceMappingURL=mutation.mjs.map\n","import { notifyManager } from './notifyManager.mjs';\nimport { Mutation } from './mutation.mjs';\nimport { matchMutation, noop } from './utils.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass MutationCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    var _this$resuming;\n\n    this.resuming = ((_this$resuming = this.resuming) != null ? _this$resuming : Promise.resolve()).then(() => {\n      const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n    }).then(() => {\n      this.resuming = undefined;\n    });\n    return this.resuming;\n  }\n\n}\n\nexport { MutationCache };\n//# sourceMappingURL=mutationCache.mjs.map\n","function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n\n  return;\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n\n  return;\n}\n\nexport { getNextPageParam, getPreviousPageParam, hasNextPage, hasPreviousPage, infiniteQueryBehavior };\n//# sourceMappingURL=infiniteQueryBehavior.mjs.map\n","import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n      this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nexport { QueryObserver };\n//# sourceMappingURL=queryObserver.mjs.map\n","import { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getQueries() {\n    return this.observers.map(observer => observer.getCurrentQuery());\n  }\n\n  getObservers() {\n    return this.observers;\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n    const matchingObserversSet = new Set(matchingObservers.map(match => match.observer));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObserversSet.has(prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}\n\nexport { QueriesObserver };\n//# sourceMappingURL=queriesObserver.mjs.map\n","import { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    const {\n      isFetching,\n      isRefetching\n    } = result;\n    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward';\n    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward';\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n  }\n\n}\n\nexport { InfiniteQueryObserver };\n//# sourceMappingURL=infiniteQueryObserver.mjs.map\n","import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    var _this$currentMutation;\n\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation2;\n\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexport { MutationObserver };\n//# sourceMappingURL=mutationObserver.mjs.map\n","// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Reset fetch status to idle in the dehydrated state to avoid\n    // query being stuck in fetching state upon hydration\n\n    const dehydratedQueryState = { ...dehydratedQuery.state,\n      fetchStatus: 'idle'\n    }; // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQueryState.dataUpdatedAt) {\n        query.setState(dehydratedQueryState);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQueryState);\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };\n//# sourceMappingURL=hydration.mjs.map\n","'use client'\nimport * as ReactDOM from 'react-dom'\nexport const unstable_batchedUpdates = ReactDOM.unstable_batchedUpdates\n","import { notifyManager } from '@tanstack/query-core'\nimport { unstable_batchedUpdates } from './reactBatchedUpdates'\n\nnotifyManager.setBatchNotifyFunction(unstable_batchedUpdates)\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client\n      .getLogger()\n      .error(\n        `The contextSharing option has been deprecated and will be removed in the next major version`,\n      )\n  }\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","'use client'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { HydrateOptions } from '@tanstack/query-core'\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","import { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexport { QueryClient };\n//# sourceMappingURL=queryClient.mjs.map\n","'use client'\nimport type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n} from '@tanstack/query-core'\nimport { InfiniteQueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","'use client'\nimport * as React from 'react'\nimport type { QueryKey, QueryFilters } from '@tanstack/query-core'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationKey, MutationFilters } from '@tanstack/query-core'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n","'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryFunction } from '@tanstack/query-core'\nimport { notifyManager, QueriesObserver } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  shouldSuspend,\n  fetchOptimistic,\n  willFetch,\n} from './suspense'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  defaultedQueries.forEach((query) => {\n    ensureStaleTime(query)\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result, isRestoring),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const options = defaultedQueries[index]\n        const queryObserver = observer.getObservers()[index]\n\n        if (options && queryObserver) {\n          if (shouldSuspend(options, result, isRestoring)) {\n            return fetchOptimistic(options, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(options, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n  const observerQueries = observer.getQueries()\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n        query: observerQueries[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return optimisticResult as QueriesResults<T>\n}\n","'use client'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","canContinue","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","hasData","initialDataUpdatedAt","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchFailureReason","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","_this$cache$config$on2","_this$cache$config2","onSettled","isFetchingOptimistic","_this$cache$config$on3","_this$cache$config3","_this$cache$config$on4","_this$cache$config4","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","_this$retryer$continu","execute","async","executeMutation","_this$options$retry","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","_this$mutationCache$c7","_this$mutationCache$c8","_this$options$onError","_this$options4","_this$mutationCache$c9","_this$mutationCache$c10","_this$options$onSettl2","_this$options5","failureReason","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","_this$resuming","resuming","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","getQueryCache","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isInitialLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","getQueries","getObservers","prevObserversMap","Map","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","_state$data","_state$data2","MutationObserver","mutate","_this$currentMutation","getMutationCache","currentMutation","_this$currentMutation2","mutateOptions","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","hydrate","dehydratedState","queryCache","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","dehydratedQueryState","unstable_batchedUpdates","ReactDOM","module","exports","e","require$$0","k","is","l","useState","m","useEffect","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","d","f","u","createElement","inst","c","g","useSyncExternalStoreShim_production_min","useSyncExternalStore","uSES","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","IsRestoringContext","useIsRestoring","IsRestoringProvider","Provider","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","shouldThrowError","_useErrorBoundary","params","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","getHasError","ensureStaleTime","willFetch","isRestoring","shouldSuspend","useBaseQuery","Observer","useCallback","onStoreChange","useHydrate","optionsRef","useRef","current","useMemo","children","queryDefaults","mutationDefaults","mountCount","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","ensureQueryData","parsedOptions","cachedData","fetchQuery","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","Context","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","mutateAsync","defaultedQueries","optimisticResult","suspensePromises","queryObserver","observerQueries","firstSingleResultWhichShouldThrow","_defaultedQueries$ind","_defaultedQueries$ind2"],"mappings":"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"}