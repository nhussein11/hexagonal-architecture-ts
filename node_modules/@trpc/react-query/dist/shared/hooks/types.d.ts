import { DefinedUseQueryResult, DehydratedState, InfiniteQueryObserverSuccessResult, InitialDataFunction, QueryObserverSuccessResult, QueryOptions, UseInfiniteQueryOptions, UseInfiniteQueryResult, UseMutationOptions, UseMutationResult, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { CreateTRPCClientOptions, TRPCClient, TRPCRequestOptions } from '@trpc/client';
import { AnyRouter } from '@trpc/server';
import { ReactNode } from 'react';
import { TRPCContextProps } from '../../internals/context';
import { TRPCHookResult } from '../../internals/useHookResult';
export declare type OutputWithCursor<TData, TCursor = any> = {
    cursor: TCursor | null;
    data: TData;
};
export interface TRPCReactRequestOptions extends Omit<TRPCRequestOptions, 'signal'> {
    /**
     * Opt out of SSR for this query by passing `ssr: false`
     */
    ssr?: boolean;
    /**
     * Opt out or into aborting request on unmount
     */
    abortOnUnmount?: boolean;
}
export interface TRPCUseQueryBaseOptions {
    /**
     * tRPC-related options
     */
    trpc?: TRPCReactRequestOptions;
}
export interface UseTRPCQueryOptions<TPath, TInput, TOutput, TData, TError> extends UseQueryOptions<TOutput, TError, TData, [TPath, TInput]>, TRPCUseQueryBaseOptions {
}
/** @internal **/
export interface DefinedUseTRPCQueryOptions<TPath, TInput, TOutput, TData, TError> extends UseTRPCQueryOptions<TPath, TInput, TOutput, TData, TError> {
    initialData: TOutput | InitialDataFunction<TOutput>;
}
export interface TRPCQueryOptions<TPath, TInput, TData, TError> extends QueryOptions<TData, TError, TData, [TPath, TInput]>, TRPCUseQueryBaseOptions {
}
export declare type ExtractCursorType<TInput> = TInput extends {
    cursor: any;
} ? TInput['cursor'] : unknown;
export interface UseTRPCInfiniteQueryOptions<TPath, TInput, TOutput, TError> extends UseInfiniteQueryOptions<TOutput, TError, TOutput, TOutput, [
    TPath,
    Omit<TInput, 'cursor'>
]>, TRPCUseQueryBaseOptions {
    initialCursor?: ExtractCursorType<TInput>;
}
export interface UseTRPCMutationOptions<TInput, TError, TOutput, TContext = unknown> extends UseMutationOptions<TOutput, TError, TInput, TContext>, TRPCUseQueryBaseOptions {
}
export interface UseTRPCSubscriptionOptions<TOutput, TError> {
    enabled?: boolean;
    onStarted?: () => void;
    onData: (data: TOutput) => void;
    onError?: (err: TError) => void;
}
export interface TRPCProviderProps<TRouter extends AnyRouter, TSSRContext> extends TRPCContextProps<TRouter, TSSRContext> {
    children: ReactNode;
}
export declare type TRPCProvider<TRouter extends AnyRouter, TSSRContext> = (props: TRPCProviderProps<TRouter, TSSRContext>) => JSX.Element;
export declare type UseDehydratedState<TRouter extends AnyRouter> = (client: TRPCClient<TRouter>, trpcState: DehydratedState | undefined) => DehydratedState | undefined;
export declare type CreateClient<TRouter extends AnyRouter> = (opts: CreateTRPCClientOptions<TRouter>) => TRPCClient<TRouter>;
/**
 * @internal
 */
export declare type UseTRPCQueryResult<TData, TError> = UseQueryResult<TData, TError> & TRPCHookResult;
/**
 * @internal
 */
export declare type DefinedUseTRPCQueryResult<TData, TError> = DefinedUseQueryResult<TData, TError> & TRPCHookResult;
/**
 * @internal
 */
export declare type UseTRPCQuerySuccessResult<TData, TError> = QueryObserverSuccessResult<TData, TError> & TRPCHookResult;
/**
 * @internal
 */
export declare type UseTRPCInfiniteQueryResult<TData, TError> = UseInfiniteQueryResult<TData, TError> & TRPCHookResult;
/**
 * @internal
 */
export declare type UseTRPCInfiniteQuerySuccessResult<TData, TError> = InfiniteQueryObserverSuccessResult<TData, TError> & TRPCHookResult;
/**
 * @internal
 */
export declare type UseTRPCMutationResult<TData, TError, TVariables, TContext> = UseMutationResult<TData, TError, TVariables, TContext> & TRPCHookResult;
//# sourceMappingURL=types.d.ts.map